name: Deploy Rails App for scuba diving repair

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Scuba diving Rails App to Raspberry Pi
    runs-on: ubuntu-latest

    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Raspberry Pi
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
          SCUBADIVING_APP_DATABASE_NAME: ${{ secrets.SCUBADIVING_APP_DATABASE_NAME }}
          SCUBADIVING_APP_DATABASE_USER: ${{ secrets.SCUBADIVING_APP_DATABASE_USER }}
          SCUBADIVING_APP_DATABASE_PASSWORD: ${{ secrets.SCUBADIVING_APP_DATABASE_PASSWORD }}
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD ssh -o StrictHostKeyChecking=no pi@$RASPBERRY_PI_IP \
          "SCUBADIVING_APP_DATABASE_NAME='$SCUBADIVING_APP_DATABASE_NAME' \
           SCUBADIVING_APP_DATABASE_USER='$SCUBADIVING_APP_DATABASE_USER' \
           SCUBADIVING_APP_DATABASE_PASSWORD='$SCUBADIVING_APP_DATABASE_PASSWORD' \
           SECRET_KEY_BASE='$SECRET_KEY_BASE' \
           bash -s" << 'EOF'

            # Ensure RVM is sourced
            if [ -s "$HOME/.rvm/scripts/rvm" ]; then
              echo "RVM found. Sourcing RVM..."
              source "$HOME/.rvm/scripts/rvm"
            elif [ -s "/etc/profile.d/rvm.sh" ]; then
              echo "RVM system-wide installation found. Sourcing RVM..."
              source /etc/profile.d/rvm.sh
            else
              echo "RVM not found. Exiting..."
              exit 1
            fi

            # Install Ruby 3.2.0 if not installed
            if ! rvm list rubies | grep "ruby-3.2.0" &> /dev/null; then
              echo "Ruby 3.2.0 not found. Installing Ruby 3.2.0..."
              rvm install 3.2.0 || { echo "Failed to install Ruby 3.2.0. Exiting..."; exit 1; }
            else
              echo "Ruby 3.2.0 is already installed."
            fi

            # Set Ruby 3.2.0 as the default and current version
            rvm use 3.2.0 --default || { echo "Failed to use Ruby 3.2.0. Exiting..."; exit 1; }

            # Check Ruby version
            ruby_version=$(ruby -v)
            if [[ $ruby_version == *"3.2.0"* ]]; then
              echo "Using Ruby 3.2.0: $ruby_version"
            else
              echo "Ruby version mismatch. Exiting..."
              exit 1
            fi

            # Upgrade RubyGems
            echo "Upgrading RubyGems..."
            gem update --system 3.2.3 || { echo "Failed to update RubyGems. Exiting..."; exit 1; }

            # Install bundler
            echo "Installing Bundler..."
            gem install bundler || { echo "Failed to install Bundler. Exiting..."; exit 1; }

            # Remove the old directory if it exists
            if [ -d "/var/www/html/scubadiving" ]; then
              echo "Removing old directory..."
              rm -rf /var/www/html/scubadiving
            fi

            # Clone the repository into /var/www/html
            echo "Cloning repository..."
            git clone git@github.com:elviajero971/scuba_diving_repair.git /var/www/html/scubadiving || { echo "Git clone failed"; exit 1; }

            # Change directory to the new clone
            cd /var/www/html/scubadiving || { echo "Directory not found"; exit 1; }

            # Export the secret_key_base
            echo "Exporting SECRET_KEY_BASE..."
            export SECRET_KEY_BASE=$SECRET_KEY_BASE

            # Export the database credentials
            echo "Exporting database credentials..."
            export SCUBADIVING_APP_DATABASE_NAME=$SCUBADIVING_APP_DATABASE_NAME
   
