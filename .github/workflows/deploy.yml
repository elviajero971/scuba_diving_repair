name: Deploy Rails App with Nginx
on:
  push:
    branches:
      - master
jobs:
  deploy:
    name: Build and Deploy Rails App
    runs-on: ubuntu-latest

    steps:
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.0
          bundler-cache: true
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: elviajero34
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 4: Build and push the Docker image
      - name: Build and Push Docker Image
        env:
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          docker login -u elviajero34 -p $DOCKERHUB_PASSWORD
          docker buildx build \
            --platform linux/arm/v7 \
            --tag elviajero34/scubadiving-app:latest \
            --cache-from=type=registry,ref=elviajero34/scubadiving-app:latest \
            --push .

      # Step 5: Transfer docker-compose.yml to Raspberry Pi
      - name: Transfer docker-compose.yml to Raspberry Pi
        env:
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD scp -o StrictHostKeyChecking=no docker-compose.yml pi@$RASPBERRY_PI_IP:/var/www/html/scubadiving/


      # Step 6: Deploy to Raspberry Pi
      - name: Deploy to Raspberry Pi
        env:
          RASPBERRY_PI_USER: ${{ secrets.RASPBERRY_PI_USER }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          PRICE_SCUBA_PREMIUM: ${{ secrets.PRICE_SCUBA_PREMIUM }}
          PRICE_SCUBA_BASIC: ${{ secrets.PRICE_SCUBA_BASIC }}
          ENV_HOST: ${{ secrets.ENV_HOST }}
          STRIPE_ENDPOINT_SECRET: ${{ secrets.STRIPE_ENDPOINT_SECRET }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_DOMAIN: ${{ secrets.SMTP_DOMAIN }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD ssh -o ServerAliveInterval=120 -o ServerAliveCountMax=100 -o StrictHostKeyChecking=no $RASPBERRY_PI_USER@$RASPBERRY_PI_IP <<EOF
            set -e
            echo "Deploying application..."
          
            # Navigate to app directory
            cd /var/www/html/scubadiving
          
            # Create or update the .env file
            echo "Updating environment variables..."
            echo "RAILS_MASTER_KEY=$RAILS_MASTER_KEY" >> .env 
            echo "STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY" >> .env
            echo "STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY" >> .env
            echo "PRICE_SCUBA_PREMIUM=$PRICE_SCUBA_PREMIUM" >> .env
            echo "PRICE_SCUBA_BASIC=$PRICE_SCUBA_BASIC" >> .env
            echo "ENV_HOST=$ENV_HOST" >> .env
            echo "STRIPE_ENDPOINT_SECRET=$STRIPE_ENDPOINT_SECRET" >> .env
            echo "SMTP_HOST=$SMTP_HOST" >> .env
            echo "SMTP_PORT=$SMTP_PORT" >> .env
            echo "SMTP_DOMAIN=$SMTP_DOMAIN" >> .env
            echo "SMTP_USER=$SMTP_USER" >> .env
            echo "SMTP_PASSWORD=$SMTP_PASSWORD" >> .env
          
            # Pull the latest image from Docker Hub
            echo "Pulling the latest Docker image..."
            docker pull elviajero34/scubadiving-app:latest
          
            # Ensure Docker Compose is installed
            echo "Installing Docker Compose if not available..."
            if ! [ -x "$(command -v docker-compose)" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-armv7" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          
            # Stop old containers and start new ones
            echo "Restarting containers..."
            docker-compose down --remove-orphans
            docker-compose up -d --build
          
            # Run database migrations
            echo "Running database migrations..."
            docker-compose exec app bundle exec rake db:migrate
          EOF

