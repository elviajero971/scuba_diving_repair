name: Deploy Rails App with Nginx

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Build and Deploy Rails App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        run: docker buildx create --use

      # Build and push Docker image to Docker Hub
      - name: Build and Push Docker Image
        run: |
          docker login -u elviajero34 -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker buildx build --platform linux/arm/v7 --tag elviajero34/scubadiving-app:latest . --push

      # Transfer docker-compose.yml and nginx.conf to Raspberry Pi
      - name: Transfer docker-compose.yml to Raspberry Pi
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
        run: |
          # Transfer the docker-compose.yml file to the Raspberry Pi
          sshpass -p $RASPBERRY_PI_PASSWORD scp -o StrictHostKeyChecking=no docker-compose.yml pi@$RASPBERRY_PI_IP:/var/www/html/scubadiving/
      - name: Transfer nginx.conf to Raspberry Pi
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
        run: |
          # Transfer the nginx.conf file to the Raspberry Pi
          sshpass -p $RASPBERRY_PI_PASSWORD scp -o StrictHostKeyChecking=no nginx.conf pi@$RASPBERRY_PI_IP:/var/www/html/scubadiving/

      # Deploy to Raspberry Pi
      - name: SSH into Raspberry Pi and deploy
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD ssh -o StrictHostKeyChecking=no pi@$RASPBERRY_PI_IP \
          "bash -s" << 'EOF'
            # Pull the latest image from Docker Hub
            docker pull elviajero34/scubadiving-app:latest

            # Navigate to the app directory
            cd /var/www/html/scubadiving

            # Ensure Docker is installed
            if ! [ -x "$(command -v docker)" ]; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
            fi

            # Stop and remove old containers
            docker-compose down || true

            # Start the new containers
            docker-compose up -d
          EOF
