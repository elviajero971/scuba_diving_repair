name: Deploy Rails App with Nginx and PostgreSQL

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy Rails App to Raspberry Pi with Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Build Docker image locally
        run: docker build -t scubadiving-app .

      - name: Install pv
        run: sudo apt-get install -y pv

      - name: Save Docker image and transfer to Raspberry Pi
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
        run: |
          # Save and transfer Docker image to the Raspberry Pi in /var/www/html/scubadiving
          docker save scubadiving-app | pv | bzip2 | sshpass -p $RASPBERRY_PI_PASSWORD ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=60 -o StrictHostKeyChecking=no pi@$RASPBERRY_PI_IP \
          "mkdir -p /var/www/html/scubadiving && cd /var/www/html/scubadiving && bunzip2 | docker load"

      - name: Deploy to Raspberry Pi
        env:
          RASPBERRY_PI_PASSWORD: ${{ secrets.RASPBERRY_PI_PASSWORD }}
          RASPBERRY_PI_IP: ${{ secrets.RASPBERRY_PI_IP }}
        run: |
          sshpass -p $RASPBERRY_PI_PASSWORD ssh -o StrictHostKeyChecking=no pi@$RASPBERRY_PI_IP \
          "bash -s" << 'EOF'
            # Navigate to the directory where the Docker image is stored
            cd /var/www/html/scubadiving

            # Ensure Docker is installed
            if ! [ -x "$(command -v docker)" ]; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
            fi

            # Remove old containers
            docker-compose down || true

            # Build and start new containers from /var/www/html/scubadiving
            docker-compose up -d --build

            echo "Deployment complete."
          EOF
